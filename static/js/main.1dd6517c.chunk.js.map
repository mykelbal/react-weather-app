{"version":3,"sources":["app_component/weather.component.jsx","app_component/form.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["minmaxTemp","min","max","className","Weather","props","city","weatherIcon","temp_celsius","temp_min","temp_max","description","Form","error","role","onSubmit","loadweather","type","name","autoComplete","placeholder","App","getWeather","e","a","preventDefault","target","elements","value","country","fetch","api_call","json","response","console","log","setState","sys","celsius","calCelsius","main","temp","weather","get_WeatherIcon","id","state","undefined","icon","celcius","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","Math","floor","icons","rangeID","this","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1dd6517c.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Weather = (props) => {\r\n  return(\r\n    <div className=\"conatiner text-light\">\r\n      <div className=\"cards pt-4\">\r\n        <h1>{props.city}</h1>\r\n        <h5 className=\"py-4\">\r\n          <i className={`wi ${props.weatherIcon} display-1`}></i>\r\n        </h5>\r\n        \r\n        {props.temp_celsius ? (<h1 className=\"py-2\">{props.temp_celsius}&deg;</h1>) : null}\r\n\r\n        {/** show max and min temp */}\r\n        {minmaxTemp(props.temp_min, props.temp_max)}\r\n\r\n        <h4 className=\"py-3\">{props.description}</h4>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nfunction minmaxTemp(min, max){\r\n  if(min && max) {\r\n  return(\r\n    <h3>\r\n      <span className=\"px-4\">{min}&deg;</span>\r\n      <span className=\"px-4\">{max}&deg;</span>\r\n    </h3>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Weather;","import React from 'react';\r\nimport \"./form.style.css\";\r\n\r\nconst Form = props => {\r\n  return(\r\n    <div className=\"container\">\r\n      <div>{props.error ? error() : null}</div>\r\n      <form onSubmit={props.loadweather}>\r\n        <div className=\"row\">\r\n          <div className=\"col-md-3 offset-md-2\">\r\n            <input\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            name=\"city\"\r\n            autoComplete=\"off\"\r\n            placeholder=\"City\"\r\n            />\r\n          </div>\r\n          <div className=\"col-md-3\">\r\n            <input\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            name=\"country\"\r\n            autoComplete=\"off\"\r\n            placeholder=\"Country\"\r\n            />  \r\n          </div>\r\n          <div className=\"col-md-3 mt-md-0 py-2 text-md-left\">\r\n            <button className=\"btn btn-warning\">Get Weather</button>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nfunction error() {\r\n  return (\r\n    <div className=\"alert alert-danger mx-5\"role=\"alert\">\r\n      Please enter city and country\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nexport default Form","import React, { Component } from 'react';\n\nimport './App.css';\n\nimport 'weather-icons/css/weather-icons.css'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Weather from \"./app_component/weather.component\";\nimport Form from \"./app_component/form.component\"\n\n// API call api.openweathermap.org/data/2.5/weather?q=London,uk\nconst API_key = \"457a1028917c33f6f81fecc9fa0be5b2\";\n\n\nclass App extends React.Component {\n  constructor(){\n    super();\n    this.state ={\n      city:undefined,\n      country:undefined,\n      icon: undefined,\n      main: undefined,\n      celcius: undefined,\n      temp_max: undefined,\n      temp_min: undefined,\n      description: \"\",\n      error: false\n    };\n\n    this.weatherIcon = {\n      Thunderstorm: \"wi-thunderstorm\",\n      Drizzle: \"wi-sleet\",\n      Rain: \"wi-storm-showers\",\n      Snow: \"wi-snow\",\n      Atmosphere: \"wi-fog\",\n      Clear: \"wi-day-sunny\",\n      Clouds: \"wi-day-fog\"\n    };\n  }\n\n  calCelsius(temp) {\n    let cell = Math.floor(temp - 273.15)\n    return cell;\n  }\n\n  get_WeatherIcon(icons, rangeID){\n    switch(true){\n      case rangeID >= 200 && rangeID <= 232:\n        this.setState({icon: this.weatherIcon.Thunderstorm});\n        break;\n      case rangeID >= 300 && rangeID <= 321:\n        this.setState({icon: this.weatherIcon.Drizzle});\n        break;\n      case rangeID >= 500 && rangeID <= 531:\n        this.setState({icon: this.weatherIcon.Rain});\n        break;\n      case rangeID >= 600 && rangeID <= 622:\n        this.setState({icon: this.weatherIcon.Snow});\n        break;\n      case rangeID >= 701 && rangeID <= 781:\n        this.setState({icon: this.weatherIcon.Atmosphere});\n        break;\n      case rangeID === 800:\n        this.setState({icon: this.weatherIcon.Clear});\n        break;\n      case rangeID >= 801 && rangeID <= 804:\n        this.setState({icon: this.weatherIcon.Clouds});\n        break;\n        default:\n          this.setState({icon: this.weatherIcon.Clouds});\n\n    }\n  }\n\n  getWeather = async(e) => {\n\n    e.preventDefault();\n\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n\n    if(city && country) {\n      const api_call = await fetch(\n        `https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_key}`\n        );\n  \n      const response = await api_call.json();\n  \n      console.log(response);\n  \n      this.setState({\n        city:`${response.name}, ${response.sys.country}`,\n        celsius:this.calCelsius(response.main.temp),\n        temp_max: this.calCelsius(response.main.temp_max),\n        temp_min: this.calCelsius(response.main.temp_min),\n        description: response.weather[0].description,\n        error: false\n      });\n      this.get_WeatherIcon(this.weatherIcon, response.weather[0].id)\n    } else {\n      this.setState({error: true});\n    }\n  }\n\n  render() {\n    return(\n      <div className=\"App\">\n        <Form loadweather={this.getWeather} error={this.state.error} />\n        <Weather \n        city={this.state.city} \n        country={this.state.country} \n        temp_celsius={this.state.celsius} \n        temp_max={this.state.temp_max} \n        temp_min={this.state.temp_min} \n        description={this.state.description} \n        weatherIcon = {this.state.icon}\n        />\n      </div>\n    );\n  }\n}\n\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}